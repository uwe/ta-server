<HTML>
<HEAD>
<Title>Continuous Contour Coloring</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Perl Edition)</p>
<p class="heading1">Continuous Contour Coloring</p>
<hr class="separator">
<div class="content">
<img src="images/smoothcontour.jpg">
<br><br>
This example demonstrates continuous coloring of the contour layer.<br><br>
By default, a contour layer will be discretely colored, which means the color will change in discrete steps according to the z level. In continuous coloring, the color will change continuously according to the z level. Continuous coloring can be enabled using <a href="ColorAxis.setColorGradient.htm">ColorAxis.setColorGradient</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> perldemo\smoothcontour.pl
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/perl
use perlchartdir;

# The x and y coordinates of the grid
my $dataX = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10];
my $dataY = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10];

# The values at the grid points. In this example, we will compute the values using
# the formula z = Sin(x / 2) * Sin(y / 2).
my $dataZ = [(0) x (scalar(@$dataX) * scalar(@$dataY))];
for(my $yIndex = 0; $yIndex &lt; scalar(@$dataY); ++$yIndex) {
    my $y = $dataY-&gt;[$yIndex];
    for(my $xIndex = 0; $xIndex &lt; scalar(@$dataX); ++$xIndex) {
        my $x = $dataX-&gt;[$xIndex];
        $dataZ-&gt;[$yIndex * scalar(@$dataX) + $xIndex] = sin($x / 2.0) * sin($y / 2.0)
            ;
    }
}

# Create a XYChart object of size 600 x 500 pixels
my $c = new XYChart(600, 500);

# Add a title to the chart using 18 points Times New Roman Bold Italic font
$c-&gt;addTitle("Nano Lattice Twister Field Intensity        ", "timesbi.ttf", 18);

# Set the plotarea at (75, 40) and of size 400 x 400 pixels. Use semi-transparent
# black (80000000) dotted lines for both horizontal and vertical grid lines
$c-&gt;setPlotArea(75, 40, 400, 400, -1, -1, -1, $c-&gt;dashLineColor(0x80000000,
    $perlchartdir::DotLine), -1);

# Set x-axis and y-axis title using 12 points Arial Bold Italic font
$c-&gt;xAxis()-&gt;setTitle("Lattice X Direction (nm)", "arialbi.ttf", 12);
$c-&gt;yAxis()-&gt;setTitle("Lattice Y Direction (nm)", "arialbi.ttf", 12);

# Set x-axis and y-axis labels to use Arial Bold font
$c-&gt;xAxis()-&gt;setLabelStyle("arialbd.ttf");
$c-&gt;yAxis()-&gt;setLabelStyle("arialbd.ttf");

# When auto-scaling, use tick spacing of 40 pixels as a guideline
$c-&gt;yAxis()-&gt;setTickDensity(40);
$c-&gt;xAxis()-&gt;setTickDensity(40);

# Add a contour layer using the given data
my $layer = $c-&gt;addContourLayer($dataX, $dataY, $dataZ);

# Set the contour color to transparent
$layer-&gt;setContourColor($perlchartdir::Transparent);

# Move the grid lines in front of the contour layer
$c-&gt;getPlotArea()-&gt;moveGridBefore($layer);

# Add a color axis (the legend) in which the left center point is anchored at (495,
# 240). Set the length to 370 pixels and the labels on the right side.
my $cAxis = $layer-&gt;setColorAxis(495, 240, $perlchartdir::Left, 370,
    $perlchartdir::Right);

# Add a bounding box to the color axis using light grey (eeeeee) as the background
# and dark grey (444444) as the border.
$cAxis-&gt;setBoundingBox(0xeeeeee, 0x444444);

# Add a title to the color axis using 12 points Arial Bold Italic font
$cAxis-&gt;setTitle("Twist Pressure (Twist-Volt)", "arialbi.ttf", 12);

# Set color axis labels to use Arial Bold font
$cAxis-&gt;setLabelStyle("arialbd.ttf");

# Use smooth gradient coloring
$cAxis-&gt;setColorGradient(1);

# Output the chart
$c-&gt;makeChart("smoothcontour.jpg")</pre></tr></td></table><br><b>[CGI Version]</b> perldemo_cgi\smoothcontour.pl
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/perl

# Include current script directory in the module path (needed on Microsoft IIS).
# This allows this script to work by copying ChartDirector to the same directory
# as the script (as an alternative to installation in Perl module directory)
use File::Basename;
use lib dirname($0) =~ /(.*)/;

use perlchartdir;

# The x and y coordinates of the grid
my $dataX = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10];
my $dataY = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10];

# The values at the grid points. In this example, we will compute the values using
# the formula z = Sin(x / 2) * Sin(y / 2).
my $dataZ = [(0) x (scalar(@$dataX) * scalar(@$dataY))];
for(my $yIndex = 0; $yIndex &lt; scalar(@$dataY); ++$yIndex) {
    my $y = $dataY-&gt;[$yIndex];
    for(my $xIndex = 0; $xIndex &lt; scalar(@$dataX); ++$xIndex) {
        my $x = $dataX-&gt;[$xIndex];
        $dataZ-&gt;[$yIndex * scalar(@$dataX) + $xIndex] = sin($x / 2.0) * sin($y / 2.0)
            ;
    }
}

# Create a XYChart object of size 600 x 500 pixels
my $c = new XYChart(600, 500);

# Add a title to the chart using 18 points Times New Roman Bold Italic font
$c-&gt;addTitle("Nano Lattice Twister Field Intensity        ", "timesbi.ttf", 18);

# Set the plotarea at (75, 40) and of size 400 x 400 pixels. Use semi-transparent
# black (80000000) dotted lines for both horizontal and vertical grid lines
$c-&gt;setPlotArea(75, 40, 400, 400, -1, -1, -1, $c-&gt;dashLineColor(0x80000000,
    $perlchartdir::DotLine), -1);

# Set x-axis and y-axis title using 12 points Arial Bold Italic font
$c-&gt;xAxis()-&gt;setTitle("Lattice X Direction (nm)", "arialbi.ttf", 12);
$c-&gt;yAxis()-&gt;setTitle("Lattice Y Direction (nm)", "arialbi.ttf", 12);

# Set x-axis and y-axis labels to use Arial Bold font
$c-&gt;xAxis()-&gt;setLabelStyle("arialbd.ttf");
$c-&gt;yAxis()-&gt;setLabelStyle("arialbd.ttf");

# When auto-scaling, use tick spacing of 40 pixels as a guideline
$c-&gt;yAxis()-&gt;setTickDensity(40);
$c-&gt;xAxis()-&gt;setTickDensity(40);

# Add a contour layer using the given data
my $layer = $c-&gt;addContourLayer($dataX, $dataY, $dataZ);

# Set the contour color to transparent
$layer-&gt;setContourColor($perlchartdir::Transparent);

# Move the grid lines in front of the contour layer
$c-&gt;getPlotArea()-&gt;moveGridBefore($layer);

# Add a color axis (the legend) in which the left center point is anchored at (495,
# 240). Set the length to 370 pixels and the labels on the right side.
my $cAxis = $layer-&gt;setColorAxis(495, 240, $perlchartdir::Left, 370,
    $perlchartdir::Right);

# Add a bounding box to the color axis using light grey (eeeeee) as the background
# and dark grey (444444) as the border.
$cAxis-&gt;setBoundingBox(0xeeeeee, 0x444444);

# Add a title to the color axis using 12 points Arial Bold Italic font
$cAxis-&gt;setTitle("Twist Pressure (Twist-Volt)", "arialbi.ttf", 12);

# Set color axis labels to use Arial Bold font
$cAxis-&gt;setLabelStyle("arialbd.ttf");

# Use smooth gradient coloring
$cAxis-&gt;setColorGradient(1);

# Output the chart
binmode(STDOUT);
print "Content-type: image/jpeg\n\n";
print $c-&gt;makeChart2($perlchartdir::JPG);</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2010 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
