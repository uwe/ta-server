<HTML>
<HEAD>
<Title>Contour Interpolation</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Perl Edition)</p>
<p class="heading1">Contour Interpolation</p>
<hr class="separator">
<div class="content">
<img src="images/contourinterpolate0.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate1.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate2.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate3.jpg">
<br><br>
This example demonstrates spline and linear surface interpolation, and discrete and continuous coloring.<br><br>
The data points for the contour layer are the z values at certain (x, y) points. However, to draw the contour and to color the layer, it is necessarily to know the z values at all pixels in the xy plane. ChartDirector uses surface interpolation to compute the z values at all pixels from the given data points. Two types of interpolation - spline and linear - are supported. They can be configured using <a href="ContourLayer.setSmoothInterpolation.htm">ContourLayer.setSmoothInterpolation</a>.<br><br>
The coloring of the contour layer can be discrete or continuous, configurable using <a href="ColorAxis.setColorGradient.htm">ColorAxis.setColorGradient</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> perldemo\contourinterpolate.pl
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/perl
use perlchartdir;

sub createChart
{
    my $img = shift;

    # The x and y coordinates of the grid
    my $dataX = [-4, -3, -2, -1, 0, 1, 2, 3, 4];
    my $dataY = [-4, -3, -2, -1, 0, 1, 2, 3, 4];

    # The values at the grid points. In this example, we will compute the values
    # using the formula z = Sin(x * pi / 3) * Sin(y * pi / 3).
    my $dataZ = [(0) x (scalar(@$dataX) * scalar(@$dataY))];
    for(my $yIndex = 0; $yIndex &lt; scalar(@$dataY); ++$yIndex) {
        my $y = $dataY-&gt;[$yIndex];
        for(my $xIndex = 0; $xIndex &lt; scalar(@$dataX); ++$xIndex) {
            my $x = $dataX-&gt;[$xIndex];
            $dataZ-&gt;[$yIndex * scalar(@$dataX) + $xIndex] = sin($x * 3.1416 / 3) *
                sin($y * 3.1416 / 3);
        }
    }

    # Create a XYChart object of size 360 x 360 pixels
    my $c = new XYChart(360, 360);

    # Set the plotarea at (30, 25) and of size 300 x 300 pixels. Use semi-transparent
    # black (c0000000) for both horizontal and vertical grid lines
    $c-&gt;setPlotArea(30, 25, 300, 300, -1, -1, -1, 0xc0000000, -1);

    # Add a contour layer using the given data
    my $layer = $c-&gt;addContourLayer($dataX, $dataY, $dataZ);

    # Set the x-axis and y-axis scale
    $c-&gt;xAxis()-&gt;setLinearScale(-4, 4, 1);
    $c-&gt;yAxis()-&gt;setLinearScale(-4, 4, 1);

    if ($img eq "0") {
        # Discrete coloring, spline surface interpolation
        $c-&gt;addTitle("Spline Surface - Discrete Coloring", "arialbi.ttf", 12);
    } elsif ($img eq "1") {
        # Discrete coloring, linear surface interpolation
        $c-&gt;addTitle("Linear Surface - Discrete Coloring", "arialbi.ttf", 12);
        $layer-&gt;setSmoothInterpolation(0);
    } elsif ($img eq "2") {
        # Smooth coloring, spline surface interpolation
        $c-&gt;addTitle("Spline Surface - Continuous Coloring", "arialbi.ttf", 12);
        $layer-&gt;setContourColor($perlchartdir::Transparent);
        $layer-&gt;colorAxis()-&gt;setColorGradient(1);
    } else {
        # Discrete coloring, linear surface interpolation
        $c-&gt;addTitle("Linear Surface - Continuous Coloring", "arialbi.ttf", 12);
        $layer-&gt;setSmoothInterpolation(0);
        $layer-&gt;setContourColor($perlchartdir::Transparent);
        $layer-&gt;colorAxis()-&gt;setColorGradient(1);
    }

    # Output the chart
    $c-&gt;makeChart("contourinterpolate$img.jpg")
}

createChart(0);
createChart(1);
createChart(2);
createChart(3);</pre></tr></td></table><br><b>[CGI Version]</b> perldemo_cgi\contourinterpolate.pl
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/perl

# Include current script directory in the module path (needed on Microsoft IIS).
# This allows this script to work by copying ChartDirector to the same directory
# as the script (as an alternative to installation in Perl module directory)
use File::Basename;
use lib dirname($0) =~ /(.*)/;

use perlchartdir;

# Get HTTP query parameters
use CGI;
my $query = new CGI;

# The x and y coordinates of the grid
my $dataX = [-4, -3, -2, -1, 0, 1, 2, 3, 4];
my $dataY = [-4, -3, -2, -1, 0, 1, 2, 3, 4];

# The values at the grid points. In this example, we will compute the values using
# the formula z = Sin(x * pi / 3) * Sin(y * pi / 3).
my $dataZ = [(0) x (scalar(@$dataX) * scalar(@$dataY))];
for(my $yIndex = 0; $yIndex &lt; scalar(@$dataY); ++$yIndex) {
    my $y = $dataY-&gt;[$yIndex];
    for(my $xIndex = 0; $xIndex &lt; scalar(@$dataX); ++$xIndex) {
        my $x = $dataX-&gt;[$xIndex];
        $dataZ-&gt;[$yIndex * scalar(@$dataX) + $xIndex] = sin($x * 3.1416 / 3) * sin($y
             * 3.1416 / 3);
    }
}

# Create a XYChart object of size 360 x 360 pixels
my $c = new XYChart(360, 360);

# Set the plotarea at (30, 25) and of size 300 x 300 pixels. Use semi-transparent
# black (c0000000) for both horizontal and vertical grid lines
$c-&gt;setPlotArea(30, 25, 300, 300, -1, -1, -1, 0xc0000000, -1);

# Add a contour layer using the given data
my $layer = $c-&gt;addContourLayer($dataX, $dataY, $dataZ);

# Set the x-axis and y-axis scale
$c-&gt;xAxis()-&gt;setLinearScale(-4, 4, 1);
$c-&gt;yAxis()-&gt;setLinearScale(-4, 4, 1);

if ($query-&gt;param("img") eq "0") {
    # Discrete coloring, spline surface interpolation
    $c-&gt;addTitle("Spline Surface - Discrete Coloring", "arialbi.ttf", 12);
} elsif ($query-&gt;param("img") eq "1") {
    # Discrete coloring, linear surface interpolation
    $c-&gt;addTitle("Linear Surface - Discrete Coloring", "arialbi.ttf", 12);
    $layer-&gt;setSmoothInterpolation(0);
} elsif ($query-&gt;param("img") eq "2") {
    # Smooth coloring, spline surface interpolation
    $c-&gt;addTitle("Spline Surface - Continuous Coloring", "arialbi.ttf", 12);
    $layer-&gt;setContourColor($perlchartdir::Transparent);
    $layer-&gt;colorAxis()-&gt;setColorGradient(1);
} else {
    # Discrete coloring, linear surface interpolation
    $c-&gt;addTitle("Linear Surface - Continuous Coloring", "arialbi.ttf", 12);
    $layer-&gt;setSmoothInterpolation(0);
    $layer-&gt;setContourColor($perlchartdir::Transparent);
    $layer-&gt;colorAxis()-&gt;setColorGradient(1);
}

# Output the chart
binmode(STDOUT);
print "Content-type: image/jpeg\n\n";
print $c-&gt;makeChart2($perlchartdir::JPG);</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2010 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
