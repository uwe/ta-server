<HTML>
<HEAD>
<Title>Surface Shading</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Perl Edition)</p>
<p class="heading1">Surface Shading</p>
<hr class="separator">
<div class="content">
<img src="images/surfaceshading0.jpg">&nbsp;&nbsp;<img src="images/surfaceshading1.jpg">&nbsp;&nbsp;<img src="images/surfaceshading2.jpg">&nbsp;&nbsp;<img src="images/surfaceshading3.jpg">
<br><br>
This example demonstrates the effects of various surface shading methods, configured using <a href="SurfaceChart.setShadingMode.htm">SurfaceChart.setShadingMode</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> perldemo\surfaceshading.pl
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/perl
use perlchartdir;

sub createChart
{
    my $img = shift;

    # The x and y coordinates of the grid
    my $dataX = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10];
    my $dataY = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10];

    # The values at the grid points. In this example, we will compute the values
    # using the formula z = x * sin(y) + y * sin(x).
    my $dataZ = [(0) x (scalar(@$dataX) * scalar(@$dataY))];
    for(my $yIndex = 0; $yIndex &lt; scalar(@$dataY); ++$yIndex) {
        my $y = $dataY-&gt;[$yIndex];
        for(my $xIndex = 0; $xIndex &lt; scalar(@$dataX); ++$xIndex) {
            my $x = $dataX-&gt;[$xIndex];
            $dataZ-&gt;[$yIndex * scalar(@$dataX) + $xIndex] = $x * sin($y) + $y * sin(
                $x);
        }
    }

    # Create a SurfaceChart object of size 380 x 400 pixels, with white (ffffff)
    # background and grey (888888) border.
    my $c = new SurfaceChart(380, 400, 0xffffff, 0x888888);

    # Demonstrate various shading methods
    if ($img eq "0") {
        $c-&gt;addTitle("11 x 11 Data Points\nSmooth Shading");
    } elsif ($img eq "1") {
        $c-&gt;addTitle("11 x 11 Points - Spline Fitted to 50 x 50\nSmooth Shading");
        $c-&gt;setInterpolation(50, 50);
    } elsif ($img eq "2") {
        $c-&gt;addTitle("11 x 11 Data Points\nRectangular Shading");
        $c-&gt;setShadingMode($perlchartdir::RectangularShading);
    } else {
        $c-&gt;addTitle("11 x 11 Data Points\nTriangular Shading");
        $c-&gt;setShadingMode($perlchartdir::TriangularShading);
    }

    # Set the center of the plot region at (175, 200), and set width x depth x height
    # to 200 x 200 x 160 pixels
    $c-&gt;setPlotRegion(175, 200, 200, 200, 160);

    # Set the plot region wall thichness to 5 pixels
    $c-&gt;setWallThickness(5);

    # Set the elevation and rotation angles to 45 and 60 degrees
    $c-&gt;setViewAngle(45, 60);

    # Set the perspective level to 35
    $c-&gt;setPerspective(35);

    # Set the data to use to plot the chart
    $c-&gt;setData($dataX, $dataY, $dataZ);

    # Set contour lines to semi-transparent black (c0000000)
    $c-&gt;setContourColor(0xc0000000);

    # Output the chart
    $c-&gt;makeChart("surfaceshading$img.jpg")
}

createChart(0);
createChart(1);
createChart(2);
createChart(3);</pre></tr></td></table><br><b>[CGI Version]</b> perldemo_cgi\surfaceshading.pl
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/perl

# Include current script directory in the module path (needed on Microsoft IIS).
# This allows this script to work by copying ChartDirector to the same directory
# as the script (as an alternative to installation in Perl module directory)
use File::Basename;
use lib dirname($0) =~ /(.*)/;

use perlchartdir;

# Get HTTP query parameters
use CGI;
my $query = new CGI;

# The x and y coordinates of the grid
my $dataX = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10];
my $dataY = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10];

# The values at the grid points. In this example, we will compute the values using
# the formula z = x * sin(y) + y * sin(x).
my $dataZ = [(0) x (scalar(@$dataX) * scalar(@$dataY))];
for(my $yIndex = 0; $yIndex &lt; scalar(@$dataY); ++$yIndex) {
    my $y = $dataY-&gt;[$yIndex];
    for(my $xIndex = 0; $xIndex &lt; scalar(@$dataX); ++$xIndex) {
        my $x = $dataX-&gt;[$xIndex];
        $dataZ-&gt;[$yIndex * scalar(@$dataX) + $xIndex] = $x * sin($y) + $y * sin($x);
    }
}

# Create a SurfaceChart object of size 380 x 400 pixels, with white (ffffff)
# background and grey (888888) border.
my $c = new SurfaceChart(380, 400, 0xffffff, 0x888888);

# Demonstrate various shading methods
if ($query-&gt;param("img") eq "0") {
    $c-&gt;addTitle("11 x 11 Data Points\nSmooth Shading");
} elsif ($query-&gt;param("img") eq "1") {
    $c-&gt;addTitle("11 x 11 Points - Spline Fitted to 50 x 50\nSmooth Shading");
    $c-&gt;setInterpolation(50, 50);
} elsif ($query-&gt;param("img") eq "2") {
    $c-&gt;addTitle("11 x 11 Data Points\nRectangular Shading");
    $c-&gt;setShadingMode($perlchartdir::RectangularShading);
} else {
    $c-&gt;addTitle("11 x 11 Data Points\nTriangular Shading");
    $c-&gt;setShadingMode($perlchartdir::TriangularShading);
}

# Set the center of the plot region at (175, 200), and set width x depth x height to
# 200 x 200 x 160 pixels
$c-&gt;setPlotRegion(175, 200, 200, 200, 160);

# Set the plot region wall thichness to 5 pixels
$c-&gt;setWallThickness(5);

# Set the elevation and rotation angles to 45 and 60 degrees
$c-&gt;setViewAngle(45, 60);

# Set the perspective level to 35
$c-&gt;setPerspective(35);

# Set the data to use to plot the chart
$c-&gt;setData($dataX, $dataY, $dataZ);

# Set contour lines to semi-transparent black (c0000000)
$c-&gt;setContourColor(0xc0000000);

# Output the chart
binmode(STDOUT);
print "Content-type: image/jpeg\n\n";
print $c-&gt;makeChart2($perlchartdir::JPG);</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2010 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
